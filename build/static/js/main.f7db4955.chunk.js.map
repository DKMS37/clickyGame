{"version":3,"sources":["components/EmojiCard/EmojiCard.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["EmojiCard","props","react_default","a","createElement","className","lib","onClick","clickHandler","emoji","id","correct","alt","src","image","Header","this","renderMessage","message","score","highScore","Component","Footer","App","state","emojis","sort","_this","randomize","clicked","undefined","Math","random","indexOf","length","concat","Object","toConsumableArray","setState","max","_this2","components_Header_Header","map","components_EmojiCard_EmojiCard","key","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7db4955.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport { CardPanel } from 'react-materialize';\n\nconst EmojiCard = props => (\n    <div className=\"card col-md-2 mr-4 ml-5 mb-2 mt-2 hoverable\">\n    <CardPanel onClick={() => props.clickHandler(props.emoji.id)}\n        className={(props.correct === false ? \"shake\" : \"\")}>\n        <img className=\"card-img-top\" alt=\"emmoji\" src={props.image} />\n    </CardPanel>\n    </div>\n)\nexport default EmojiCard;\n\n\n","import React, { Component } from 'react'\nimport './Header.css'\n\nclass Header extends Component {\n\n    renderMessage() {\n        let message ='CLICK AN EMOJI TO START THE GAME!'\n        return <li>{message}</li>\n    }\n\n    render() {\n        return (\n            <nav className=\"pinned amber\">\n                <div>\n                    <ul className=\"center navList\">\n                        <li className=\"logo\"><i className=\"em em-three_button_mouse\"></i> Clicky Game <i className=\"em em-lion_face\"></i></li>\n                        {this.renderMessage(this.props.message)}\n                        <li className=\"Score\">Score: {this.props.score} | High Score: {this.props.highScore}</li>\n                    </ul>\n                </div>\n            </nav>\n\n        )\n    }\n}\n\nexport default Header;","import React from \"react\";\nimport \"./Footer.css\";\nimport { CardPanel } from 'react-materialize';\n\nfunction Footer () {\n    return (\n        \n       <footer className= \"footer col-md-12 text-center\">\n            <CardPanel\n                className=\"bottom\"> Clicky <img alt=\"react\" src=\"https://clicky-game.netlify.com/assets/images/react.svg\"/>  Game! </CardPanel>\n     </footer>\n     \n    );\n}\nexport default Footer;\n","import React, { Component } from \"react\";\nimport EmojiCard from \"./components/EmojiCard\";\nimport emoji from \"./emoji.json\";\nimport { Row, CardPanel } from 'react-materialize';\nimport Header from './components/Header/Header';\nimport Footer from \"./components/Footer/Footer\";\n\n\nclass App extends Component {\n  state = {\n    emojis: emoji.sort(this.randomize),\n    clicked: [],\n    score: 0,\n    highScore: 0,\n    correct: undefined,\n\n  }\n  randomize = () => Math.random() > .5 ? -1 : 1\n\n  clickHandler = emoji => {\n    if (this.state.clicked.indexOf(emoji) === -1) {\n      let score = this.state.clicked.length + 1,\n        clicked = score === this.state.emojis.length ? [] : [...this.state.clicked, emoji]\n\n      this.setState({\n        emojis: this.state.emojis.sort(this.randomize),\n        clicked: clicked,\n        score: score,\n        highScore: Math.max(this.state.highScore, score),\n        correct: true,\n        \n      })\n    } else {\n      this.setState({\n        emojis: this.state.emojis.sort(this.randomize),\n        clicked: [],\n        score: 0,\n        correct: false,\n\n      })\n    }\n  }\n  render() {\n    return (\n\n      <div >\n\n        <div className=\"header\">\n          <Header correct={this.state.correct}\n            score={this.state.score} highScore={this.state.highScore} />\n        </div>\n        <Row>\n          <div className=\"container-fluid brown darken-4\" >\n            <CardPanel className=\"grey lighten-3\">\n              <h5 className=\"text-center\">Click an EM <i className=\"em em-smiley\"></i> JI to earn POINTS, but make sure you don't click the same one Twice!</h5>\n            </CardPanel>\n          </div>\n        </Row>\n        <br />\n        <div className=\"container\">\n          <Row>\n            {this.state.emojis.map(emoji => <EmojiCard correct={this.state.correct} key={emoji.id}\n              emoji={emoji} image={emoji.image} clickHandler={this.clickHandler} />)}\n          </Row>\n        </div>\n        <div className=\"row\">\n          <Footer />\n        </div>\n\n      </div >\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}